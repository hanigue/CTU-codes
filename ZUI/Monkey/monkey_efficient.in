assign(max_kept,1000).

formulas(assumptions).

  % ENVIRONMENT
  
  hasBanana!=doesntHavebanana.
  hasBox!=doesntHaveBox.
  isDown!=isUp.

  follows(1)=2. follows(2)=3. follows(3)=4.
  all x precedes(follows(x))=x.
  max=4. min=1. 
  % explicit game plan boundaries simplify the future causal rule for is_breeze

  % tiles adjacency
  all x all y (adjacent(x,y,follows(x),y) & adjacent(follows(x),y,x,y) & adjacent(x,y,x,follows(y)) & adjacent(x,follows(y),x,y)).

  % monkey 

  % the monkey can move
  all x all y canMoveTo(x,y,x,follows(y)) <-> (y!=4).
  all x all y canMoveTo(x,y,follows(x),y) <-> (x!=4).
  all x all y canMoveTo(x,y,precedes(x),y) <-> (x!=1).
  all x all y canMoveTo(x,y,x,precedes(y)) <-> (y!=1).
 
  % action definition
  
  % MOVEMENT
  all x all y all x1 all y1 all z all w all u all v (monkey(x,follows(y),result(move_up,z),w,u,v) <- (monkey(x,y,z,w,u,v) & canMoveTo(x,y,x,follows(y)))).
  all x all y all x1 all y1 all z all w all u all v (monkey(x,precedes(y),result(mode_down,z),w,u,v) <- (monkey(x,y,z,w,u,v) & canMoveTo(x,y,x,precedes(y)))).
  all x all y all x1 all y1 all z all w all u all v (monkey(precedes(x),y,result(move_left,z),w,u,v) <- (monkey(x,y,z,w,u,v) & canMoveTo(x,y,precedes(x),y))).
  all x all y all x1 all y1 all z all w all u all v (monkey(follows(x),y,result(more_right,z),w,u,v) <- (monkey(x,y,z,w,u,v) & canMoveTo(x,y,follows(x),y))).

  % GRAB bananaA
  all x all y all w all w1 all z all u (monkey(x,y,result(grab_bananaa,z),hasBanana,u,isUp) <- monkey(x,y,z,doesntHavebanana,u,isUp) & bananaa(x,y)).

  % GRAB BOX
  all x all y all w all z all u all v (monkey(x,y,result(grab_box,z),u,hasBox,v) <- monkey(x,y,z,u,doesntHaveBox,v) & box(x,y)).
  
  % PLACE BOX
  all x all y all w all z all u all v (monkey(x,y,result(place_box,z),u,doesntHaveBox,v) & box(x,y) <- monkey(x,y,z,u,hasBox,v)).

  % CLIMB BOX
  all x all y all w all z all u all v (monkey(x,y,result(climb,z),u,v,isUp) <- monkey(x,y,z,u,v,isDown) & box(x,y)).

  % CLIMB DOWN BOX
  all x all y all w all z all u all v (monkey(x,y,result(climb_down,z),u,v,isDown) <- monkey(x,y,z,u,v,isUp)).

  % the initial position including the direction
  monkey(1,1,pocatecnistav,doesntHavebanana,doesntHaveBox,isDown).
  banana(1,4).
  box(4,1).
      
end_of_list.

formulas(goals).

  % PROVE THAT monkey CAN MOVE
  %exists state (monkey(3,1,state,doesntHavebanana,doesntHaveBox,isDown)).

  % PROVE THAT monkey CAN GRAB box
  %exists x exists y exists state (monkey(x,y,state,doesntHavebanana,hasBox,isDown)).

  % PROVE THAT monkey CAN MOVE UNDER THE BANANA WITH BOX
  %exists x exists y exists state (monkey(x,y,state,doesntHavebanana,hasBox,isDown) & banana(x,y)).
 
  % PROVE THAT monkey CAN PLACE THE BOX UNDER THE BANANA
  %exists x exists y exists state (monkey(x,y,state,doesntHavebanana,doesntHaveBox,isDown) & banana(x,y) & box(x,y)).

  % PROVE THAT monkey CAN CLIMB ON THE BOX UNDER THE BANANA
  %exists x exists y exists state (monkey(x,y,state,doesntHavebanana,doesntHaveBox,isUp) & banana(x,y)).

  % PROVE THAT monkey CAN GRAB THE BANANA
  %exists x exists y exists state (monkey(x,y,state,hasBanana,doesntHaveBox,isUp)).

  % PROVE THAT monkey CAN GRAB BANANA AND RETURN TO FIRST POSITION
  exists state (monkey(1,1,state,hasBanana,doesntHaveBox,isDown)).
  

end_of_list.
